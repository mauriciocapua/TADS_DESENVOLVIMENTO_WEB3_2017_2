
package server;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "UserWS", targetNamespace = "http://server/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface UserWS {


    /**
     * 
     * @return
     *     returns java.util.List<server.User>
     */
    @WebMethod
    @WebResult(name = "User", targetNamespace = "")
    @RequestWrapper(localName = "listAll", targetNamespace = "http://server/", className = "server.ListAll")
    @ResponseWrapper(localName = "listAllResponse", targetNamespace = "http://server/", className = "server.ListAllResponse")
    @Action(input = "http://server/UserWS/listAllRequest", output = "http://server/UserWS/listAllResponse")
    public List<User> listAll();

    /**
     * 
     * @return
     *     returns server.Dado
     * @throws TokenValidNotFoundException_Exception
     * @throws UserAuthenticationException_Exception
     */
    @WebMethod
    @WebResult(name = "dado", targetNamespace = "")
    @RequestWrapper(localName = "consulta", targetNamespace = "http://server/", className = "server.Consulta")
    @ResponseWrapper(localName = "consultaResponse", targetNamespace = "http://server/", className = "server.ConsultaResponse")
    @Action(input = "http://server/UserWS/consultaRequest", output = "http://server/UserWS/consultaResponse", fault = {
        @FaultAction(className = TokenValidNotFoundException_Exception.class, value = "http://server/UserWS/consulta/Fault/TokenValidNotFoundException"),
        @FaultAction(className = UserAuthenticationException_Exception.class, value = "http://server/UserWS/consulta/Fault/UserAuthenticationException")
    })
    public Dado consulta()
        throws TokenValidNotFoundException_Exception, UserAuthenticationException_Exception
    ;

    /**
     * 
     * @param id
     * @return
     *     returns server.User
     * @throws UserNotFoundException_Exception
     */
    @WebMethod
    @WebResult(name = "User", targetNamespace = "")
    @RequestWrapper(localName = "listById", targetNamespace = "http://server/", className = "server.ListById")
    @ResponseWrapper(localName = "listByIdResponse", targetNamespace = "http://server/", className = "server.ListByIdResponse")
    @Action(input = "http://server/UserWS/listByIdRequest", output = "http://server/UserWS/listByIdResponse", fault = {
        @FaultAction(className = UserNotFoundException_Exception.class, value = "http://server/UserWS/listById/Fault/UserNotFoundException")
    })
    public User listById(
        @WebParam(name = "id", targetNamespace = "")
        String id)
        throws UserNotFoundException_Exception
    ;

    /**
     * 
     * @return
     *     returns server.User
     * @throws TokenValidNotFoundException_Exception
     * @throws UserAuthenticationException_Exception
     */
    @WebMethod
    @WebResult(name = "dado", targetNamespace = "")
    @RequestWrapper(localName = "consultaVersion", targetNamespace = "http://server/", className = "server.ConsultaVersion")
    @ResponseWrapper(localName = "consultaVersionResponse", targetNamespace = "http://server/", className = "server.ConsultaVersionResponse")
    @Action(input = "http://server/UserWS/consultaVersionRequest", output = "http://server/UserWS/consultaVersionResponse", fault = {
        @FaultAction(className = TokenValidNotFoundException_Exception.class, value = "http://server/UserWS/consultaVersion/Fault/TokenValidNotFoundException"),
        @FaultAction(className = UserAuthenticationException_Exception.class, value = "http://server/UserWS/consultaVersion/Fault/UserAuthenticationException")
    })
    public User consultaVersion()
        throws TokenValidNotFoundException_Exception, UserAuthenticationException_Exception
    ;

    /**
     * 
     * @param senha
     * @param login
     * @return
     *     returns java.util.List<server.Token>
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(name = "verifyToken", targetNamespace = "")
    @RequestWrapper(localName = "login", targetNamespace = "http://server/", className = "server.Login")
    @ResponseWrapper(localName = "loginResponse", targetNamespace = "http://server/", className = "server.LoginResponse")
    @Action(input = "http://server/UserWS/loginRequest", output = "http://server/UserWS/loginResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/UserWS/login/Fault/Exception")
    })
    public List<Token> login(
        @WebParam(name = "login", targetNamespace = "")
        String login,
        @WebParam(name = "senha", targetNamespace = "")
        String senha)
        throws Exception_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns server.Token
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createToken", targetNamespace = "http://server/", className = "server.CreateToken")
    @ResponseWrapper(localName = "createTokenResponse", targetNamespace = "http://server/", className = "server.CreateTokenResponse")
    @Action(input = "http://server/UserWS/createTokenRequest", output = "http://server/UserWS/createTokenResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/UserWS/createToken/Fault/Exception")
    })
    public Token createToken(
        @WebParam(name = "arg0", targetNamespace = "")
        User arg0)
        throws Exception_Exception
    ;

}
